name: AutoDocOps CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build y Test Backend
  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencias
      run: dotnet restore
      working-directory: ./backend
      
    - name: Build backend
      run: dotnet build --no-restore --configuration Release
      working-directory: ./backend
      
    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      working-directory: ./backend
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/TestResults
        flags: backend
        name: backend-coverage
        
    - name: Publish backend artifacts
      run: dotnet publish --no-build --configuration Release --output ./publish
      working-directory: ./backend/src/AutoDocOps.Api/AutoDocOps.Api
      
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifacts
        path: ./backend/src/AutoDocOps.Api/AutoDocOps.Api/publish

  # Job 2: Build y Test Frontend
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/AutoDocOps-Frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend/AutoDocOps-Frontend
      
    - name: Run linting
      run: npm run lint
      working-directory: ./frontend/AutoDocOps-Frontend
      continue-on-error: true
      
    - name: Run type checking
      run: npx tsc --noEmit
      working-directory: ./frontend/AutoDocOps-Frontend
      continue-on-error: true
      
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend/AutoDocOps-Frontend
      
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: ./frontend/AutoDocOps-Frontend/dist

  # Job 3: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-build-test]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Setup .NET for security scan
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install security scan tools
      run: |
        dotnet tool install --global security-scan
        npm install -g audit-ci
      continue-on-error: true
      
    - name: Run .NET security scan
      run: security-scan ./backend/AutoDocOps.sln
      working-directory: ./
      continue-on-error: true
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      working-directory: ./frontend/AutoDocOps-Frontend
      continue-on-error: true

  # Job 4: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build-test]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Deploy to Fly.io Staging
      run: flyctl deploy --config fly.staging.toml
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        
    - name: Run health check
      run: |
        sleep 30
        curl -f https://autodocops-staging.fly.dev/health || exit 1

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Deploy Backend to Fly.io
      run: flyctl deploy --config fly.toml
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        
    - name: Deploy Frontend to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: autodocops-frontend
        directory: ./frontend/AutoDocOps-Frontend/dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run production health check
      run: |
        sleep 60
        curl -f https://api.autodocops.com/health || exit 1
        curl -f https://autodocops.com || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'üöÄ AutoDocOps deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: '‚ùå AutoDocOps deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 7: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: k6 run --out json=results.json ./tests/performance/load-test.js
      env:
        BASE_URL: https://autodocops-staging.fly.dev
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: results.json

  # Job 8: E2E Testing
  e2e-test:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install --with-deps
        
    - name: Run E2E tests
      run: npx playwright test
      env:
        BASE_URL: https://autodocops-staging.fly.dev
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

